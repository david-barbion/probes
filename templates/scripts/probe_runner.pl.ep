#!/usr/bin/perl

use strict;
use warnings;

use POSIX;
use Getopt::Long qw{ :config bundling no_ignore_case_always no_auto_abbrev};

my $action;
my $foreground = 0;
my $pidfile = "/tmp/probe_runner.pid";

my $base_dir = "/tmp";
my ($run_dir, $output_dir, $logfile);
my $frequency = 60; # wait 60 seconds between runs
my $chain = 0;
my $description;

my $psql = "/usr/bin/psql";
my ($host, $port, $user, $dbname);
my $psql_command = $psql;
my $pg_version;

my @sysstat_dirs = ("/usr/lib/sa", "/usr/lib64/sa", "/usr/lib/sysstat");
my $sysstat_dir;
my $sadc_command;
my $have_sadc = 0;

my $help;

my $sql;

# Input from the database
my $commands;
my $VAR1;
<%== $commands %>

$commands = $VAR1;


sub logger {
    my $now = localtime;
    map { print STDERR qq{[$now] $_\n} } @_ if scalar(@_);
}

sub check_pidfile {
    if (-f $pidfile) {
	unless (open(PID, $pidfile)) {
	    logger qq{Unable to open pidfile ($pidfile): $!};
	    return 0; # error
	}
	my $pid = <PID>;
	chomp $pid;
	close(PID);

	if (kill(0, $pid)) {
	    return $pid; # exists and signalable
	} else {
	    return 0; # does not exist or is not ours
	}
    } else {
	return 0; # does not exist
    }
}

sub write_pid {
    my $pid = shift;

    return 1 unless defined $pid;

    unless (open(PID, ">", $pidfile)) {
	logger qq{Unable to open pidfile ($pidfile): $!};
	return 1;
    }

    print PID $pid;
    close PID;

    return 0;
}

sub daemonize {

    # prepare output dir, needed for the logfile
    if (! -d $output_dir) {
	system("mkdir -p $output_dir");
    }

    # fork and go to background, detach from tty
    my $child = fork();
    exit 0 if $child;

    exit 1 if write_pid($$);
    close(STDIN);
    close(STDOUT);
    close(STDERR);
    open STDOUT,">/dev/null";
    open STDERR,">>$logfile";
    POSIX::setsid();
    chdir '/';
}

sub sigterm {
    # block sigterm
    local $SIG{TERM} = "IGNORE";

    logger qq{Received stop request, exiting};

    # remove the pidfile
    if (-f $pidfile) {
	unlink $pidfile or logger qq{Unable to remove pidfile: $!};
    }

    # exit
    exit 0;
}

sub sighup {
    # block sighup
    local $SIG{HUP} = "IGNORE";

    # rotate and pack
    my $dir = rotate();
    pack_archive("$base_dir/$dir");
}

sub pre_flight {
    my $basedir = shift;

    # Check if the output directory is writable
    if (! -w $basedir) {
	logger "$basedir is not writable, aborting";
	exit 1;
    }

    # Prepare psql command line
    $psql_command = $psql;
    $psql_command .= " -h $host" if defined $host;
    $psql_command .= " -p $port" if defined $port;
    $psql_command .= " -U $user" if defined $user;

    # Check PostgreSQL version, this is also a connection test
    my $db = $dbname ||= '';
    $pg_version = `$psql_command -Atc "SELECT setting FROM pg_settings WHERE name = 'server_version_num'" $db`;
    if ($? >> 8) {
	logger qq{Could not get version from PostgreSQL};
	exit 1;
    }

    # Check for sysstat
    foreach my $dir (@sysstat_dirs) {
	if (-x qq{$dir/sadc}) {
	    logger qq{Found the sysstat data collector: $dir/sadc};
	    $sadc_command = qq{$dir/sadc -S ALL 1 1 $output_dir/sa};
	    $have_sadc = 1;
	    last;
	}
    }
    unless ($have_sadc) {
	logger qq{Could not find the sysstat data collector};
    };

}

sub gen_sql {
    # Prepare the SQL script
    $sql = '';
    while (my ($type, $cmds) = each %{$commands}) {
	if ($type eq 'sql') {
	    foreach my $c (@{$cmds}) {

		# Filter on PostgreSQL versions

		$sql .= <<EOF
-- $c->{probe}
\\o | (mkdir -p \$(dirname ${output_dir}/$c->{output}) && cat >> ${output_dir}/$c->{output})
$c->{command};

EOF
	    }
	}
    }
}

sub run_loop {
    # Prepare psql command line
    my $psql_command = $psql;
    $psql_command .= " -h $host" if defined $host;
    $psql_command .= " -p $port" if defined $port;
    $psql_command .= " -U $user" if defined $user;

    my $db = $dbname ||= '';

    # Run the commands in an infinite loop
    while (1) {
	open(PSQL, qq{| $psql_command -At -F',' -f - $db});
	print PSQL $sql, "\n";
	close(PSQL);

	if (exists($commands->{sar}) and defined($sadc_command)) {
	    system($sadc_command);
	}

	sleep($frequency);
    }
}

sub setup_probe_run {

    # Prepare the output directory
    my $now = time;
    $run_dir = qq{pg_probe_${now}};
    $run_dir =~ s/\s/_/g;
    $run_dir =~ s/\W//g;

    # Ensure the output dir is absolute
    unless ($base_dir =~ m!^/!) {
	my $pwd = `pwd`; chomp $pwd;
	$base_dir = qq{$pwd/$base_dir};
    }

    $output_dir = qq{${base_dir}/${run_dir}};
    $logfile = "$output_dir/runner.log";

    # Do the pre-flight check
    pre_flight($base_dir);

    unless (-d $output_dir) {
	system("mkdir -p $output_dir");
    }

    my $hostname = `hostname`; chomp $hostname;
    if (!defined $description) {
	my $start = localtime;
	$description = qq{Probe run on $hostname starting at $start};
    }

    # Create the META file
    if (open(META, ">$output_dir/META")) {
	print META qq{version: "0.2"\n};
	print META qq{description: "$description"\n};
	print META qq{hostname: "$hostname"\n};
	print META qq{chain: "$chain"\n};
	while (my ($type, $cmds) = each %{$commands}) {
	    foreach my $c (@{$cmds}) {
		print META qq{probe: $c->{id} "$c->{probe}"\n};
	    }
	}
	close(META);
    } else {
	logger qq{Could not create META file. Aborting.};
	exit 1;
    }

    # When we rotate we want to have all the data loaded into the same
    # result set, we use the chain value to do so. Thus we increment
    # the chain number after each rotation
    $chain++;

    # Create the commands to run,
    # the output files depends on what we have just prepared XXX
}

sub rotate {

    my $old_dir = $run_dir;

    setup_probe_run();
    gen_sql();

    unless($foreground) {
	# reopen logfile
	logger "Run rotated";
	close(STDERR);
	open STDERR,">>$logfile";
    }

    return $old_dir;
}

sub pack_archive {
    my $dir = shift;

    my ($prefix, $basename);
    if ($dir =~ m!(.*)/([^/]+)$!) {
	$prefix = $1;
	$basename = $2;
    } else {
	$prefix = ".";
	$basename = $dir;
    }

    # Run preload commands for sysstat
    if (exists $commands->{sar} and -f "$dir/sa") {
	foreach my $c (@{$commands->{sar}}) {
	    # prepare output directory for the probe data
	    system("mkdir -p \$(dirname ${dir}/$c->{output})");

	    # run the preload command
	    my $pc = $c->{preload};
	    $pc =~ s!\%f!$dir/sa!g;
	    logger "$pc > ${dir}/$c->{output}";
	    system("$pc > ${dir}/$c->{output}");
	}
    }

    unlink("$dir/sa") if (-f "$dir/sa");

    # Create a tarball
    my $tarball = qq{${basename}.tgz};
    my $was = getcwd;
    chdir $prefix;

    if (system("tar czf $tarball $basename")) {
	logger qq{Unable to create result archive: $dir};
	chdir $was;
	return undef;
    }
    chdir $was;

    return $tarball;
}

sub usage {
    print qq{usage: $0 [options] {start|stop|pack|rotate|status}
options:
  -P, --psql=BIN           path to the psql command
  -d, --dbname=DATABASE    connection database
  -h, --host=HOSTNAME      database server host or socket directory
  -p, --port=PORT          database server port
  -U, --username=USERNAME  connection user name

  -o, --output=DIR         output directory
  -s, --sysstat=DIR        sysstat sadc directory

  -i, --interval=NUM       time to wait between runs
  -F, --foreground         do not detach from console
  -f, --pid-file=FILE      path to the pid file

  -?, --help               print usage

};
    exit 1
}

# Process command line options and look for an action keyword. There
# are no mandatory options.
GetOptions("psql|P=s" => \$psql,
	   "dbname|d=s" => \$dbname,
	   "username|U=s" => \$user,
	   "host|h=s" => \$host,
	   "port|p=i" => \$port,
	   "output|o=s" => \$base_dir,
	   "foreground|F" => \$foreground,
	   "pid-file|f=s" => \$pidfile,
	   "sysstat|s=s" => \$sysstat_dir,
	   "interval|i=i" => \$frequency,
	   "help|?" => \$help) or die usage();
usage if $help;

# Validate action name
if (defined $ARGV[0]) {
    if ($ARGV[0] ne "start" and $ARGV[0] ne "stop"
	and $ARGV[0] ne "pack" and $ARGV[0] ne "rotate"
	and $ARGV[0] ne "status") {
	logger qq{Unknown action};
	usage;
    }
    $action = $ARGV[0];
} else {
    logger qq{Action is missing.};
    usage;
}

# Include given sysstat directory to the default list
push @sysstat_dirs, $sysstat_dir if defined $sysstat_dir;

# Do the work asked
if ($action eq 'start') {
    # check if another runner is already running
    if (check_pidfile()) {
	logger qq{Another probe is running};
	exit 1;
    }

    setup_probe_run();
    gen_sql();

    # setup the signal handlers
    $SIG{INT} = \&sigterm;
    $SIG{TERM} = \&sigterm;
    $SIG{HUP} = \&sighup;

    # daemonize if asked
    daemonize() unless $foreground;

    # run the commands in a loop
    run_loop();

} elsif ($action eq 'stop') {

    my $target_pid = check_pidfile();

    if ($target_pid) {
	kill(15, $target_pid);
    } else {
	logger qq{Probe is not running. Stale pidfile?};
    }

} elsif ($action eq 'pack') {
    # Search for dirs in $base_dir matching the run_dir pattern and
    # create a tarball for each of them
    while (my $f = glob("$base_dir/*")) {
	next if (-f $f);
	if (-d $f && $f =~ m!/(pg_probe_\d+)$!) {
	    # skip already packed dirs
	    next if (-f "$base_dir/$1.tgz");

	    print "Packing $f: ";
	    my $tarball = pack_archive($f);
	    (defined $tarball) ? print "done.\n" : print "failed.\n";
	}
    }

} elsif ($action eq 'rotate') {

    my $target_pid = check_pidfile();

    if ($target_pid) {
	kill(1, $target_pid);
    } else {
	logger qq{Probe is not running. Stale pidfile?};
    }
} elsif ($action eq 'status') {
    my $target_pid = check_pidfile();

    if ($target_pid) {
	print qq{Probe is running: $target_pid\n};
    } else {
	print qq{Probe is not running. Check pid file and ps\n};
    }
}
